import torch.nn as nn
import torch.nn
from typing import Any, Callable

class MLP(nn.Module[torch.Tensor]):
    output_probability: Any = ...
    n_layers: Any = ...
    batch_norm: Any = ...
    full: Any = ...
    bnorm: Any = ...
    relu: Any = ...
    full_out: Any = ...
    def __init__(self, dim_in: int, dim_hid: int, dim_out: int, n_layers: int=..., batch_norm: bool=..., output_probability: bool=...) -> None: ...
    forward: Callable[..., torch.Tensor]

class MLP3(nn.Module[torch.Tensor]):
    output_probability: Any = ...
    full1: Any = ...
    relu1: Any = ...
    full2: Any = ...
    relu2: Any = ...
    full3: Any = ...
    relu3: Any = ...
    fc_out: Any = ...
    def __init__(self, dim_in: int, dim_hid: int, dim_out: int, output_probability: bool=...) -> None: ...
    forward: Callable[..., torch.Tensor]
